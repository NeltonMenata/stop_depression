import 'package:flutter/material.dart';
import 'package:stop_depression/layers/presenter/ui/test/test_component.dart';
import 'package:stop_depression/layers/presenter/ui/test/test_model.dart';

class TestView extends StatefulWidget {
  const TestView({super.key});

  @override
  State<TestView> createState() => _TestViewState();
}

int currentTest = 0;

class _TestViewState extends State<TestView> {
  //int currentTest = 0;
  @override
  void initState() {
    currentTest = 0;
    super.initState();
  }

  final listTest = [
    TestModel(
        "N√£o me sinto triste",
        "Eu me sinto",
        "Estou sempre triste e n√£o consigo sair disto",
        "Estou t√£o triste ou infeliz que n√£o consigo suportar"),
    TestModel(
        "N√£o estou especialmente desanimado quanto ao futuro",
        "Eu me sinto desanimado quanto ao futuro",
        "Acho que nada tenho a esperar",
        "Acho o futuro sem esperan√ßas e tenho a impress√£o de que as coisas n√£o podem melhor"),
    TestModel(
        "N√£o me sinto um fracasso",
        "Acho que fracassei mais do que uma pessoa comum",
        "Quando olho pra tr√°s, na minha vida, tudo o que posso ver √© um monte de fracassos",
        " Acho que, como pessoa, sou um completo fracasso"),
    TestModel(
      "Tenho tanto prazer em tudo como antes",
      "N√£o sinto mais prazer nas coisas como antes",
      "N√£o encontro um prazer real em mais nada",
      "Estou insatisfeito ou aborrecido com tudo",
    ),
    TestModel(
        "N√£o me sinto especialmente culpado",
        "Eu me sinto culpado grande parte do tempo",
        "Eu me sinto culpado na maior parte do tempo",
        "Eu me sinto sempre culpado"),
    TestModel("N√£o acho que esteja sendo punido", "Acho que posso ser punido",
        "Creio que vou ser punido", "Acho que estou sendo punido"),
    TestModel(
        "N√£o me sinto decepcionado comigo mesmo",
        "Estou decepcionado comigo mesmo",
        "Estou enojado de mim",
        "Eu me odeio"),
    TestModel(
        "N√£o me sinto de qualquer modo pior que os outros",
        "Sou cr√≠tico em rela√ß√£o a mim por minhas fraquezas ou erros",
        "Eu me culpo sempre por minhas falhas",
        "Eu me culpo por tudo de mal que acontece"),
    TestModel(
        "N√£o tenho quaisquer id√©ias de me matar",
        "Tenho id√©ias de me matar, mas n√£o as executaria",
        "Gostaria de me matar",
        "Eu me mataria se tivesse oportunidade"),
    TestModel(
        "N√£o choro mais que o habitual",
        "Choro mais agora do que costumava",
        "Agora, choro o tempo todo",
        "Costumava ser capaz de chorar, mas agora n√£o consigo, mesmo que o queria"),
    TestModel(
        "N√£o sou mais irritado agora do que j√° fui",
        "Fico aborrecido ou irritado mais facilmente do que costumava",
        "Agora, eu me sinto irritado o tempo todo",
        "N√£o me irrito mais com coisas que costumavam me irritar"),
    TestModel(
        "N√£o perdi o interesse pelas outras pessoas",
        "Estou menos interessado pelas outras pessoas do que costumava estar",
        "Perdi a maior parte do meu interesse pelas outras pessoas",
        "Perdi todo o interesse pelas outras pessoas"),
    TestModel(
        "Tomo decis√µes t√£o bem quanto antes",
        "Adio as tomadas de decis√µes mais do que costumava",
        "Tenho mais dificuldades de tomar decis√µes do que antes",
        "Absolutamente n√£o consigo mais tomar decis√µes"),
    TestModel(
        "N√£o acho que de qualquer modo pare√ßo pior do que antes",
        "Estou preocupado em estar parecendo velho ou sem atrativo",
        "Acho que h√° mudan√ßas permanentes na minha apar√™ncia, que me fazem parecer sem atrativo",
        "Acredito que pare√ßo feio"),
    TestModel(
        "Posso trabalhar t√£o bem quanto antes",
        "√â preciso algum esfor√ßo extra para fazer alguma coisa",
        "Tenho que me esfor√ßar muito para fazer alguma coisa",
        "N√£o consigo mais fazer qualquer trabalho"),
    TestModel(
        "Consigo dormir t√£o bem como o habitual",
        "N√£o durmo t√£o bem como costumava",
        "Acordo 1 a 2 horas mais cedo do que habitualmente e acho dif√≠cil voltar a dormir",
        "Acordo v√°rias horas mais cedo do que costumava e n√£o consigo voltar a dormir"),
    TestModel(
        "N√£o fico mais cansado do que o habitual",
        "Fico cansado mais facilmente do que costumava",
        "Fico cansado em fazer qualquer coisa",
        "Estou cansado demais para fazer qualquer coisa"),
    TestModel(
        "O meu apetite n√£o est√° pior do que o habitual",
        "Meu apetite n√£o √© t√£o bom como costumava ser",
        "Meu apetite √© muito pior agora",
        "Absolutamente n√£o tenho mais apetite"),
    TestModel(
        "N√£o tenho perdido muito peso se √© que perdi algum recentemente",
        "Perdi mais do que 2 quilos e meio",
        "Perdi mais do que 5 quilos",
        "Perdi mais do que 7 quilos"),
    TestModel(
        "N√£o estou mais preocupado com a minha sa√∫de do que o habitual",
        "Estou preocupado com problemas f√≠sicos, tais como dores, indisposi√ß√£o do est√¥mago ou constipa√ß√£o",
        "Estou muito preocupado com problemas f√≠sicos e √© dif√≠cil pensar em outra coisa",
        "Estou t√£o preocupado com meus problemas f√≠sicos que n√£o consigo pensar em qualquer outra coisa"),
    TestModel(
        "N√£o notei qualquer mudan√ßa recente no meu interesse por sexo",
        "Estou menos interessado por sexo do que costumava",
        "Estou muito menos interessado por sexo agora",
        "Perdi completamente o interesse por sexo"),
  ];

  int resultTest = 0;

  final msgResult = [
    "Seus sintomas indicam melancolia, algo passageiro. Atividades prazerosas, exerc√≠cios, sono regulado e apoio emocional podem ajudar. Vamos acompanhar e, se precisar, ajustamos o cuidado¬†juntos.",
    "Voc√™ apresenta sinais de depress√£o leve, mas com mudan√ßas no estilo de vida, como exerc√≠cios, boa alimenta√ß√£o, sono regulado e apoio emocional, √© poss√≠vel melhorar significativamente. Vamos superar¬†juntos.",
    "Voc√™ tem sintomas de depress√£o moderada, mas com terapia, rotina saud√°vel, atividades prazerosas e apoio, ter uma alimenta√ß√£o saud√°vel √© poss√≠vel melhorar. Vamos trabalhar juntos para encontrar o melhor caminho¬†para¬†voc√™.",
    "Seus sintomas s√£o mais intensos, voc√™ precisa de ajuda de um profissional, contacte imediatamente o nosso psic√≥logo. Com acompanhamento pr√≥ximo, terapia e suporte adequado, h√° caminhos para voc√™ se sentir melhor. Vamos enfrentar isso juntos,¬†passo¬†a¬†passo."
  ];

  int indexMsg = 0;

  String progressMsg = "Voc√™ est√° indo bem üòä";
  bool showProgressMsg = false;

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.sizeOf(context).width;
    if (currentTest == 1) {
      setState(() {
        showProgressMsg = true;
      });
    } else if (currentTest == 6) {
      setState(() {
        progressMsg = "Continue";
        showProgressMsg = true;
      });
    } else if (currentTest == 10) {
      setState(() {
        progressMsg = "J√° falta pouco üëèüèΩ";
        showProgressMsg = true;
      });
    } else if (currentTest == 16) {
      setState(() {
        progressMsg = "Est√° quase terminando";
        showProgressMsg = true;
      });
    } else {
      setState(() {
        showProgressMsg = false;
      });
    }

    return Stack(
      //mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: double.infinity,
          color: Colors.white,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Visibility(
                visible: showProgressMsg,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: GestureDetector(
                      onTap: () {
                        print("############ clicou ##########");
                        setState(() {
                          showProgressMsg = false;
                        });
                      },
                      child: Container(
                          width: width * .38,
                          padding: const EdgeInsets.all(10),
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(15),
                              gradient: LinearGradient(
                                  begin: Alignment.topLeft,
                                  end: Alignment.bottomRight,
                                  colors: [
                                    Colors.blue.withOpacity(.5),
                                    Colors.pink.withOpacity(.8)
                                  ])),
                          child: Text(
                            progressMsg,
                            style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                height: .95,
                                fontSize: 12.5),
                          )),
                    ),
                  ),
                ),
              ),
              TestComponent(
                action: () {
                  Future.delayed(const Duration(seconds: 0), () {
                    //print(listTest[currentTest].value);
                    setState(() {
                      if (!(currentTest == (listTest.length - 1))) {
                        currentTest++;
                      }
                      int currentValue = 0;
                      for (var element in listTest) {
                        currentValue += element.value;
                      }
                      resultTest = currentValue;
                    });
                    verifyTest(context);
                  });
                },
                listTest[currentTest],
              ),

              const SizedBox(
                height: 12,
              ),
              //Text("Resultado: ${resultTest}"),
              // ElevatedButton(
              //   onPressed: () {
              //     //showAboutDialog(context: context,);
              //     verifyTest(context);
              //   },
              //   child: const Text("Resultado do Teste"),
              // )
            ],
          ),
        ),
      ],
    );
  }

  void verifyTest(BuildContext context) {
    if (currentTest == 20) {
      if (resultTest < 13) {
        indexMsg = 0;
      } else if (resultTest > 13 && resultTest <= 19) {
        indexMsg = 1;
      } else if (resultTest > 19 && resultTest <= 28) {
        indexMsg = 2;
      } else {
        indexMsg = 3;
      }
      Future.delayed(const Duration(milliseconds: 3000), () {
        showDialog(
            context: context,
            builder: (context) => AlertDialog(
                  backgroundColor: indexMsg == 0
                      ? Colors.greenAccent
                      : indexMsg == 1
                          ? Colors.greenAccent
                          : indexMsg == 2
                              ? Colors.amber
                              : Colors.red,
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const Text(
                        "Resultado:",
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        msgResult[indexMsg],
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                  actions: [
                    TextButton(
                      child: const Text("Ok"),
                      onPressed: () {
                        Navigator.pop(context);
                      },
                    )
                  ],
                ));
      });
    } else {
      // showDialog(
      //     context: context,
      //     builder: (context) => AlertDialog(
      //           content: const Text("Termine o teste para ver o resultado"),
      //           actions: [
      //             TextButton(
      //               child: const Text("Ok"),
      //               onPressed: () {
      //                 Navigator.pop(context);
      //               },
      //             )
      //           ],
      //         ));
    }
  }
}
